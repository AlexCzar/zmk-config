/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DFLT    0
#define NUMSYM  1
#define NAV     2
#define XTND    3
#define FUNL    4
#define GAME    5

#define BTPC 0
#define BTPH 1

&kscan0 {
	col-gpios
		= <&pro_micro 21 GPIO_ACTIVE_HIGH>
		, <&pro_micro 20 GPIO_ACTIVE_HIGH>
		, <&pro_micro 19 GPIO_ACTIVE_HIGH>
		, <&gpio1 1 GPIO_ACTIVE_HIGH>
		, <&pro_micro 15 GPIO_ACTIVE_HIGH>
		, <&pro_micro 14 GPIO_ACTIVE_HIGH>
		, <&pro_micro 16 GPIO_ACTIVE_HIGH>
		, <&pro_micro 10 GPIO_ACTIVE_HIGH>
		;
};

&kscan1 {
	col-gpios
		= <&pro_micro 21 GPIO_ACTIVE_HIGH>
		, <&pro_micro 20 GPIO_ACTIVE_HIGH>
		, <&pro_micro 19 GPIO_ACTIVE_HIGH>
		, <&gpio1 1 GPIO_ACTIVE_HIGH>
		, <&pro_micro 15 GPIO_ACTIVE_HIGH>
		, <&pro_micro 14 GPIO_ACTIVE_HIGH>
		, <&pro_micro 16 GPIO_ACTIVE_HIGH>
		, <&pro_micro 10 GPIO_ACTIVE_HIGH>
		;
}


&left_encoder   { steps = <30>; };
&right_encoder  { steps = <30>; };

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE>;
};

&sk {
    quick-release;
};

/ {
    behaviors {
        /omit-if-no-ref/ hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /omit-if-no-ref/ hms: homerow_mods_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_SLOW";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /omit-if-no-ref/ smart_shift: smart_shift {
            label = "SMART_SHIFT";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sk RSHFT>, <&caps_word>;
            mods = <(MOD_RSFT)>;
            #binding-cells = <0>;
        };
        /omit-if-no-ref/ col_semi: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_bt_clr {
            layers = <3>;
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&bt BT_CLR>;
        };
        combo_left_smart_shift {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&smart_shift>;
        };
        combo_right_smart_shift {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&smart_shift>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// NOTES:
// F1 to bring up command runner (KRunner)
// F12 to bring up terminal emulator (Kitty)
// Home row mods: GASC
// Pause to mute/unmute microphone
// RALT as Compose key
// ╭───────┬──────┬───────┬──────┬──────┬───╮
// | ESC     Q      W       F      P      B |                                            |  J   |  L     |  U    |  Y    |  :    |   [  |
// | TAB     A(G)   R(A)    S(S)   T(C)   G |───────┬────────╮                                         |  M   |  N(C)  |  E(S) |  I(A) |  O(G) |   '  |
// | SHIFT   Z      X       C      D      V | GRAV  | F1     |         ||     ||  F12  |  MEH    |  K   |  H     |  ,    |  .    |  /    | RALT |
//           | Pause | LGUI(SPACE) | slXTND | slNUM | slFUNL |          ||  RET  |  SPACE  | BSPC |  slNAV | Pause |
            bindings = <
    &kp ESC    &kp Q        &kp W       &kp F        &kp P        &kp B                                                       &kp J     &kp L        &kp U        &kp Y       &hm SEMI COLON   &kp LBKT
    &kp TAB    &hms LGUI A  &hm LALT R  &hm LSHFT S  &hm LCTRL T  &kp G                                                       &kp M     &hm RCTRL N  &hm RSHFT E  &hm LALT I  &hms LGUI O  &kp SQT
    &kp LSHFT  &kp Z        &kp X       &kp C        &kp D        &kp V     &kp GRAVE   &kp F1     &kp F12  &kp LC(LS(LALT))  &kp K     &kp H        &kp COMMA    &kp DOT     &kp FSLH    &kp RALT
                                  &kp PAUSE_BREAK  &kp LG(SPACE)  &sl XTND  &sl NUMSYM  &sl FUNL   &kp RET         &kp SPACE  &kp BSPC  &sl NAV  &kp PAUSE_BREAK
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

        numsym_layer {
// ---------------------------------------------------------------------------------------------------------------------------------------------;
// |  ESC  |  !  |  @  |  #    |  $    |  &     |                                             |   *  |  7     |  8    |  9    |   -      |   >  |
// |  TAB  |  %  |  _  |  (    |  {    |  [     |                                             |   +  |  4     |  5    |  6    |   =      |   |  |
// | SHIFT |  ^  |  ~  |  )    |  }    |  ]     |  GRAV  |    F1   ||     ||  F12  | &to DFLT |   0  |  1     |  2    |  3    |   /      |   \  |
//                     | Pause |  Menu | slXTND | slNUM  |  slFUNL ||     ||  RET  |  SPACE   | BSPC |  moNAV | Pause |
            bindings = <
    &trans  &kp EXCL       &kp AT          &kp HASH        &kp DLLR        &kp AMPS                                     &kp STAR   &kp N7        &kp N8        &kp N9       &kp MINUS       &kp GT
    &trans  &hms LGUI PRCNT  &hm LALT UNDER  &hm LSHFT LPAR  &hm LCTRL LBRC  &kp LBKT                                     &kp PLUS   &hm RCTRL N4  &hm RSHFT N5  &hm LALT N6  &hms LGUI EQUAL  &kp PIPE &trans  &kp CARET       &kp TILDE        &kp RPAR        &kp RBRC        &kp RBKT  &trans &trans     &trans &to DFLT  &kp N0     &kp N1        &kp N2        &kp N3       &kp FSLH        &kp BSLH
                                                             &trans  &trans  &trans  &trans &trans     &trans   &trans  &trans     &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

        nav_layer {
// -------------------------------------------------------------------------------------------------------------------------------------------------------------;
// | ESC    | BT_OUT_t | BT_SEL 3 | BT_SEL 2 |  BTPC  |  BTPH  |                                                  | PG_UP | HOME  | SCLC  |  END  | BRI-  | BRI+    |
// |  TAB   |   F2     |    F3    |    F4    |  F5    |  F6    |                                                  | PG_DN | LEFT  |  UP   | RIGHT | LGUI  | tog ext |
// | SHIFT  |   F7     |    F8    |    F9    |  F10   |  F11   |  &to GAME  |   F1    ||     ||  F12   | &to DFLT | PRTSC | SCLC  | DOWN  | INS   | Pause | tog num |
//                                |  Pause   |  Menu  | slXTND | slNUM      | slFUNL  ||     ||  RET   |  SPACE   | BSPC  | moNAV | Pause |
            bindings = <
    &trans      &out OUT_TOG  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL BTPC  &bt BT_SEL BTPH                                &kp PG_UP  &kp HOME   &kp SLCK  &kp END    &kp C_BRI_DN     &kp C_BRI_UP
    &trans      &hms LGUI F2   &hm LALT F3   &hm LSHFT F4  &hm LCTRL F5     &kp F6                                         &kp PG_DN  &kp LEFT   &kp UP    &kp RIGHT  &kp LGUI         &tog XTND
    &kp LCTRL   &kp F7        &kp F8        &kp F9        &kp F10          &kp F11  &to GAME &trans     &trans  &to DFLT  &kp K      &kp PSCRN  &kp DOWN  &kp INS    &kp PAUSE_BREAK  &tog NUMSYM
                                                     &trans   &trans       &trans   &trans &trans       &trans    &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

        ext_layer {
// ----------------------------------------------------------------------------------------------------------------------------------------------------------;
// | ESC      | CAPS | back | find  | frwd  | INS  |                                             | PG_UP | HOME  | SHFT  |  END  | VOL+  | VOL-  |
// | CAPS_WRD | LGUI | LALT | LSHFT | LCTRL | RALT |                                             | PG_DN | LEFT  |  UP   | RIGHT | Pl/Pa | Mute  |
// | A(SPACE) | ^Z   | CUT  | COPY  | ^D    | PASTE|   GRAV |   F1    ||     ||  F12  | &to DFLT | PRTSC | SCLC  | DOWN  | INS   | Prev  | Next  |
//                          | Pause |LS+K_CMENU |slXTND | slNUM | slFUNL  ||     ||  RET  |  SPACE   |  DEL  | moNAV | Pause |
            bindings = <
    &trans         &kp CAPS   &kp C_AC_BACK  &kp LC(F)  &kp C_AC_FORWARD  &kp INS                                  &kp PG_UP  &kp HOME   &kp LSHFT  &kp END    &kp C_VOL_DN     &kp C_VOL_UP
    &kp CAPS       &kp LGUI   &kp LALT      &kp LSHFT  &kp LCTRL      &kp RALT                                     &kp PG_DN  &kp LEFT   &kp UP     &kp RIGHT  &kp C_PP         &kp C_MUTE
    &kp LA(SPACE)  &kp LC(Z)  &kp C_AC_CUT  &kp C_AC_COPY  &kp LC(D)  &kp C_AC_PASTE  &trans &trans   &trans  &to DFLT  &kp SLCK   &kp PSCRN  &kp DOWN   &kp INS    &kp C_PREV       &kp C_NEXT
                                              &trans   &kp LS(K_CMENU)   &trans     &trans &trans   &trans    &trans  &kp DEL    &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

        fun_layer {
            bindings = <
    &trans         &kp CAPS   &kp LA(LEFT)  &kp LC(F)  &kp LA(RIGHT)  &kp INS                                    &hm LC(F12) F12   &hm LC(F7) F7   &hm LC(F8) F8   &hm LC(F9) F9   &none   &none
    &kp CAPS       &kp LGUI   &kp LALT      &kp LSHFT  &kp LCTRL      &kp RALT                                   &hm LC(F11) F11   &hm LC(F4) F4   &hm LC(F5) F5   &hm LC(F6) F6   &none   &none
    &kp LA(SPACE)  &none      &none         &none      &none          &none      &trans &trans  &trans &to DFLT  &hm LC(F10) F10   &hm LC(F1) F1   &hm LC(F2) F2   &hm LC(F3) F3   &none   &none
                                            &trans     &trans         &trans     &trans &trans  &trans   &trans  &trans            &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

        game_layer {
            bindings = <
    &trans  &kp F      &kp N1  &kp N2  &kp N3  &kp N4                                     &hm LC(F12) F12   &hm LC(F7) F7   &hm LC(F8) F8   &hm LC(F9) F9   &none   &none
    &kp N5  &kp LSHFT  &kp A   &kp W   &kp D   &kp LCTRL                                    &hm LC(F11) F11   &hm LC(F4) F4   &hm LC(F5) F5   &hm LC(F6) F6   &none   &none
    &trans  &kp X      &kp X   &kp S   &kp E   &kp T       &trans &trans  &trans &to DFLT  &hm LC(F10) F10   &hm LC(F1) F1   &hm LC(F2) F2   &hm LC(F3) F3   &none   &none
                                       &trans     &trans         &trans     &trans &trans  &trans   &trans  &trans            &trans          &trans

            >;
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
